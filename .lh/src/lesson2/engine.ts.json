{
    "sourceFile": "src/lesson2/engine.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1643546434996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643546961903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   mathPriorities,\n   mathOperatorsPriorities,\n } from \"./mathOperators\";\n \n-const [FIRST, SECOND, THIRD] = mathPriorities;\n+const [FIRST, SECOND, THIRD, FOURTH] = mathPriorities;\n \n export const firstPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n   stack.reduce<ParsedLineType>((result, nextItem) => {\n     const prevItem = result[result.length - 2];\n@@ -26,9 +26,9 @@\n     }\n     return result;\n   }, []);\n \n-export const secondPrioritiesCalc = (stack: ParsedLineType): number =>\n+export const fourthPrioritiesCalc = (stack: ParsedLineType): number =>\n   stack.reduce<number>((result, nextItem, key) => {\n     const item = stack[key - 1];\n \n     if (mathOperatorsPriorities[item] === FIRST) {\n"
                },
                {
                    "date": 1643547069369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,13 +30,13 @@\n export const fourthPrioritiesCalc = (stack: ParsedLineType): number =>\n   stack.reduce<number>((result, nextItem, key) => {\n     const item = stack[key - 1];\n \n-    if (mathOperatorsPriorities[item] === FIRST) {\n+    if (mathOperatorsPriorities[item] === THIRD) {\n       throw new TypeError(\"Unexpected stack!\");\n     }\n \n-    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === SECOND) {\n+    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === FOURTH) {\n       result = mathOperators[item](Number(result), Number(nextItem));\n     }\n     return result;\n   }, Number(stack[0]));\n"
                },
                {
                    "date": 1643547122705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,14 +7,14 @@\n } from \"./mathOperators\";\n \n const [FIRST, SECOND, THIRD, FOURTH] = mathPriorities;\n \n-export const firstPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n+export const thirdPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n   stack.reduce<ParsedLineType>((result, nextItem) => {\n     const prevItem = result[result.length - 2];\n     const item = result[result.length - 1];\n \n-    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === FIRST) {\n+    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === THIRD) {\n       if (!mathOperators[item]) {\n         throw new TypeError(\"Unexpected stack!\");\n       }\n       result = [\n"
                },
                {
                    "date": 1643547491041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,27 @@\n     }\n     return result;\n   }, []);\n \n+export const firstPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n+  stack.reduce<ParsedLineType>((result, nextItem) => {\n+    const prevItem = result[result.length - 2];\n+    const item = result[result.length - 1];\n+\n+    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === FIRST) {\n+      if (!mathOperators[item]) {\n+        throw new TypeError(\"Unexpected stack!\");\n+      }\n+      result = [\n+        ...result.slice(0, -2),\n+        mathOperators[item](Number(prevItem), Number(nextItem)),\n+      ];\n+    } else {\n+      result.push(nextItem);\n+    }\n+    return result;\n+  }, []);\n+\n export const fourthPrioritiesCalc = (stack: ParsedLineType): number =>\n   stack.reduce<number>((result, nextItem, key) => {\n     const item = stack[key - 1];\n \n"
                },
                {
                    "date": 1643551024163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,26 @@\n     }\n     return result;\n   }, []);\n \n+export const secondPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n+  stack.reduce<ParsedLineType>((result, nextItem) => {\n+    const item = result[result.length - 1];\n+\n+    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === FIRST) {\n+      if (!mathOperators[item]) {\n+        throw new TypeError(\"Unexpected stack!\");\n+      }\n+      result = [\n+        ...result.slice(0, 1),\n+        mathOperators[item](Number(nextItem), 0),\n+      ];\n+    } else {\n+      result.push(nextItem);\n+    }\n+    return result;\n+  }, []);\n+\n export const fourthPrioritiesCalc = (stack: ParsedLineType): number =>\n   stack.reduce<number>((result, nextItem, key) => {\n     const item = stack[key - 1];\n \n"
                },
                {
                    "date": 1643551073785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n export const secondPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n   stack.reduce<ParsedLineType>((result, nextItem) => {\n     const item = result[result.length - 1];\n \n-    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === FIRST) {\n+    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === SECOND) {\n       if (!mathOperators[item]) {\n         throw new TypeError(\"Unexpected stack!\");\n       }\n       result = [\n"
                },
                {
                    "date": 1643551360771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n       if (!mathOperators[item]) {\n         throw new TypeError(\"Unexpected stack!\");\n       }\n       result = [\n-        ...result.slice(0, 1),\n+        ...result.slice(0, -1),\n         mathOperators[item](Number(nextItem), 0),\n       ];\n     } else {\n       result.push(nextItem);\n"
                },
                {
                    "date": 1643553821851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,40 @@\n import {\n   mathOperators,\n   mathPriorities,\n   mathOperatorsPriorities,\n+  mathOperatorsPostArg,\n } from \"./mathOperators\";\n \n const [FIRST, SECOND, THIRD, FOURTH] = mathPriorities;\n \n+export const prioritiesCalc = (\n+  stack: ParsedLineType,\n+  priority: number\n+): ParsedLineType =>\n+  stack.reduce<ParsedLineType>((result, nextItem) => {\n+    const prevItem = result[result.length - 2];\n+    const item = result[result.length - 1];\n+\n+    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === priority) {\n+      if (!mathOperators[item]) {\n+        throw new TypeError(\"Unexpected stack!\");\n+      }\n+      const sliceCount = mathOperatorsPostArg[item] ? 1 : 2;\n+      const arg1 = mathOperatorsPostArg[item]\n+        ? Number(nextItem)\n+        : Number(prevItem);\n+      const arg2 = mathOperatorsPostArg[item] ? 0 : Number(nextItem);\n+      result = [\n+        ...result.slice(0, -sliceCount),\n+        mathOperators[item](arg1, arg2),\n+      ];\n+    } else {\n+      result.push(nextItem);\n+    }\n+    return result;\n+  }, []);\n+\n export const thirdPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n   stack.reduce<ParsedLineType>((result, nextItem) => {\n     const prevItem = result[result.length - 2];\n     const item = result[result.length - 1];\n"
                },
                {
                    "date": 1643553830001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n } from \"./mathOperators\";\n \n const [FIRST, SECOND, THIRD, FOURTH] = mathPriorities;\n \n-export const prioritiesCalc = (\n+export const priorityCalc = (\n   stack: ParsedLineType,\n   priority: number\n ): ParsedLineType =>\n   stack.reduce<ParsedLineType>((result, nextItem) => {\n"
                },
                {
                    "date": 1643553951097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     }\n     return result;\n   }, []);\n \n-export const fourthPrioritiesCalc = (stack: ParsedLineType): number =>\n+export const lastPrioritiesCalc = (stack: ParsedLineType): number =>\n   stack.reduce<number>((result, nextItem, key) => {\n     const item = stack[key - 1];\n \n     if (mathOperatorsPriorities[item] === THIRD) {\n"
                },
                {
                    "date": 1643553979236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   mathOperatorsPriorities,\n   mathOperatorsPostArg,\n } from \"./mathOperators\";\n \n-const [FIRST, SECOND, THIRD, FOURTH] = mathPriorities;\n+const [THIRD, FOURTH] = mathPriorities;\n \n export const priorityCalc = (\n   stack: ParsedLineType,\n   priority: number\n@@ -35,64 +35,8 @@\n     }\n     return result;\n   }, []);\n \n-export const thirdPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n-  stack.reduce<ParsedLineType>((result, nextItem) => {\n-    const prevItem = result[result.length - 2];\n-    const item = result[result.length - 1];\n-\n-    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === THIRD) {\n-      if (!mathOperators[item]) {\n-        throw new TypeError(\"Unexpected stack!\");\n-      }\n-      result = [\n-        ...result.slice(0, -2),\n-        mathOperators[item](Number(prevItem), Number(nextItem)),\n-      ];\n-    } else {\n-      result.push(nextItem);\n-    }\n-    return result;\n-  }, []);\n-\n-export const firstPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n-  stack.reduce<ParsedLineType>((result, nextItem) => {\n-    const prevItem = result[result.length - 2];\n-    const item = result[result.length - 1];\n-\n-    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === FIRST) {\n-      if (!mathOperators[item]) {\n-        throw new TypeError(\"Unexpected stack!\");\n-      }\n-      result = [\n-        ...result.slice(0, -2),\n-        mathOperators[item](Number(prevItem), Number(nextItem)),\n-      ];\n-    } else {\n-      result.push(nextItem);\n-    }\n-    return result;\n-  }, []);\n-\n-export const secondPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n-  stack.reduce<ParsedLineType>((result, nextItem) => {\n-    const item = result[result.length - 1];\n-\n-    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === SECOND) {\n-      if (!mathOperators[item]) {\n-        throw new TypeError(\"Unexpected stack!\");\n-      }\n-      result = [\n-        ...result.slice(0, -1),\n-        mathOperators[item](Number(nextItem), 0),\n-      ];\n-    } else {\n-      result.push(nextItem);\n-    }\n-    return result;\n-  }, []);\n-\n export const lastPrioritiesCalc = (stack: ParsedLineType): number =>\n   stack.reduce<number>((result, nextItem, key) => {\n     const item = stack[key - 1];\n \n"
                },
                {
                    "date": 1643554702114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   mathOperatorsPriorities,\n   mathOperatorsPostArg,\n } from \"./mathOperators\";\n \n-const [THIRD, FOURTH] = mathPriorities;\n+const [FIRST, SECOND, THIRD, FOURTH] = mathPriorities;\n \n export const priorityCalc = (\n   stack: ParsedLineType,\n   priority: number\n"
                }
            ],
            "date": 1643546434996,
            "name": "Commit-0",
            "content": "import { ParsedLineType } from \"./parser\";\nimport { isNumber } from \"./helpers\";\nimport {\n  mathOperators,\n  mathPriorities,\n  mathOperatorsPriorities,\n} from \"./mathOperators\";\n\nconst [FIRST, SECOND, THIRD] = mathPriorities;\n\nexport const firstPrioritiesCalc = (stack: ParsedLineType): ParsedLineType =>\n  stack.reduce<ParsedLineType>((result, nextItem) => {\n    const prevItem = result[result.length - 2];\n    const item = result[result.length - 1];\n\n    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === FIRST) {\n      if (!mathOperators[item]) {\n        throw new TypeError(\"Unexpected stack!\");\n      }\n      result = [\n        ...result.slice(0, -2),\n        mathOperators[item](Number(prevItem), Number(nextItem)),\n      ];\n    } else {\n      result.push(nextItem);\n    }\n    return result;\n  }, []);\n\nexport const secondPrioritiesCalc = (stack: ParsedLineType): number =>\n  stack.reduce<number>((result, nextItem, key) => {\n    const item = stack[key - 1];\n\n    if (mathOperatorsPriorities[item] === FIRST) {\n      throw new TypeError(\"Unexpected stack!\");\n    }\n\n    if (!isNumber(String(item)) && mathOperatorsPriorities[item] === SECOND) {\n      result = mathOperators[item](Number(result), Number(nextItem));\n    }\n    return result;\n  }, Number(stack[0]));\n"
        }
    ]
}