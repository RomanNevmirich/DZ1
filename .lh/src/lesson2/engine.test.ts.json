{
    "sourceFile": "src/lesson2/engine.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1643547006321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643547160229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,47 @@\n import { firstPrioritiesCalc, secondPrioritiesCalc, thirdPrioritiesCalc, fourthPrioritiesCalc } from \"./engine\";\n \n-describe(\"firstPrioritiesCalc simple cases\", () => {\n+describe(\"thirdPrioritiesCalc simple cases\", () => {\n   it(\"[1, * 32]\", () => {\n-    expect(firstPrioritiesCalc([1, \"*\", 32])).toEqual([32]);\n+    expect(thirdPrioritiesCalc([1, \"*\", 32])).toEqual([32]);\n   });\n \n   it(\"[32, /, 32]\", () => {\n-    expect(firstPrioritiesCalc([32, \"/\", 32])).toEqual([1]);\n+    expect(thirdPrioritiesCalc([32, \"/\", 32])).toEqual([1]);\n   });\n \n   it(\"[32, + 32]\", () => {\n-    expect(firstPrioritiesCalc([32, \"+\", 32])).toEqual([32, \"+\", 32]);\n+    expect(thirdPrioritiesCalc([32, \"+\", 32])).toEqual([32, \"+\", 32]);\n   });\n });\n \n-describe(\"firstPrioritiesCalc mixed with second priorities cases\", () => {\n+describe(\"thirdPrioritiesCalc mixed with second priorities cases\", () => {\n   it(\"[32, /, 32, +, 10, *, 10]\", () => {\n-    expect(firstPrioritiesCalc([32, \"/\", 32, \"+\", 10, \"*\", 10])).toEqual([\n+    expect(thirdPrioritiesCalc([32, \"/\", 32, \"+\", 10, \"*\", 10])).toEqual([\n       1,\n       \"+\",\n       100,\n     ]);\n   });\n });\n \n-describe(\"secondPrioritiesCalc invalid cases\", () => {\n+describe(\"fourthPrioritiesCalc invalid cases\", () => {\n   it(\"[32, / 32]\", () => {\n-    expect(() => secondPrioritiesCalc([32, \"/\", 32])).toThrow(\n+    expect(() => fourthPrioritiesCalc([32, \"/\", 32])).toThrow(\n       TypeError(\"Unexpected stack!\")\n     );\n   });\n });\n \n-describe(\"secondPrioritiesCalc simple cases\", () => {\n+describe(\"fourthPrioritiesCalc simple cases\", () => {\n   it(\"[32, + 32]\", () => {\n-    expect(secondPrioritiesCalc([32, \"+\", 32])).toEqual(64);\n+    expect(fourthPrioritiesCalc([32, \"+\", 32])).toEqual(64);\n   });\n \n   it(\"[32, - 32]\", () => {\n-    expect(secondPrioritiesCalc([32, \"-\", 32])).toEqual(0);\n+    expect(fourthPrioritiesCalc([32, \"-\", 32])).toEqual(0);\n   });\n \n   it(\"[32, - 32, +, 10]\", () => {\n-    expect(secondPrioritiesCalc([32, \"-\", 32, \"+\", 10])).toEqual(10);\n+    expect(fourthPrioritiesCalc([32, \"-\", 32, \"+\", 10])).toEqual(10);\n   });\n });\n"
                },
                {
                    "date": 1643547167466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { firstPrioritiesCalc, secondPrioritiesCalc, thirdPrioritiesCalc, fourthPrioritiesCalc } from \"./engine\";\n+import { /*firstPrioritiesCalc, secondPrioritiesCalc,*/ thirdPrioritiesCalc, fourthPrioritiesCalc } from \"./engine\";\n \n describe(\"thirdPrioritiesCalc simple cases\", () => {\n   it(\"[1, * 32]\", () => {\n     expect(thirdPrioritiesCalc([1, \"*\", 32])).toEqual([32]);\n"
                },
                {
                    "date": 1643547173847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n-import { /*firstPrioritiesCalc, secondPrioritiesCalc,*/ thirdPrioritiesCalc, fourthPrioritiesCalc } from \"./engine\";\n+import {\n+  /*firstPrioritiesCalc, secondPrioritiesCalc,*/ thirdPrioritiesCalc,\n+  fourthPrioritiesCalc,\n+} from \"./engine\";\n \n describe(\"thirdPrioritiesCalc simple cases\", () => {\n   it(\"[1, * 32]\", () => {\n     expect(thirdPrioritiesCalc([1, \"*\", 32])).toEqual([32]);\n"
                },
                {
                    "date": 1643553119874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,5 @@\n-import {\n-  /*firstPrioritiesCalc, secondPrioritiesCalc,*/ thirdPrioritiesCalc,\n-  fourthPrioritiesCalc,\n-} from \"./engine\";\n+import { thirdPrioritiesCalc, fourthPrioritiesCalc } from \"./engine\";\n \n describe(\"thirdPrioritiesCalc simple cases\", () => {\n   it(\"[1, * 32]\", () => {\n     expect(thirdPrioritiesCalc([1, \"*\", 32])).toEqual([32]);\n"
                },
                {
                    "date": 1643554185469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,23 @@\n-import { thirdPrioritiesCalc, fourthPrioritiesCalc } from \"./engine\";\n+import { priorityCalc, lastPrioritiesCalc } from \"./engine\";\n \n describe(\"thirdPrioritiesCalc simple cases\", () => {\n   it(\"[1, * 32]\", () => {\n-    expect(thirdPrioritiesCalc([1, \"*\", 32])).toEqual([32]);\n+    expect(priorityCalc([1, \"*\", 32], 3)).toEqual([32]);\n   });\n \n   it(\"[32, /, 32]\", () => {\n-    expect(thirdPrioritiesCalc([32, \"/\", 32])).toEqual([1]);\n+    expect(priorityCalc([32, \"/\", 32], 3)).toEqual([1]);\n   });\n \n   it(\"[32, + 32]\", () => {\n-    expect(thirdPrioritiesCalc([32, \"+\", 32])).toEqual([32, \"+\", 32]);\n+    expect(priorityCalc([32, \"+\", 32], 3)).toEqual([32, \"+\", 32]);\n   });\n });\n \n describe(\"thirdPrioritiesCalc mixed with second priorities cases\", () => {\n   it(\"[32, /, 32, +, 10, *, 10]\", () => {\n-    expect(thirdPrioritiesCalc([32, \"/\", 32, \"+\", 10, \"*\", 10])).toEqual([\n+    expect(priorityCalc([32, \"/\", 32, \"+\", 10, \"*\", 10], 3)).toEqual([\n       1,\n       \"+\",\n       100,\n     ]);\n@@ -25,23 +25,23 @@\n });\n \n describe(\"fourthPrioritiesCalc invalid cases\", () => {\n   it(\"[32, / 32]\", () => {\n-    expect(() => fourthPrioritiesCalc([32, \"/\", 32])).toThrow(\n+    expect(() => lastPrioritiesCalc([32, \"/\", 32])).toThrow(\n       TypeError(\"Unexpected stack!\")\n     );\n   });\n });\n \n describe(\"fourthPrioritiesCalc simple cases\", () => {\n   it(\"[32, + 32]\", () => {\n-    expect(fourthPrioritiesCalc([32, \"+\", 32])).toEqual(64);\n+    expect(lastPrioritiesCalc([32, \"+\", 32])).toEqual(64);\n   });\n \n   it(\"[32, - 32]\", () => {\n-    expect(fourthPrioritiesCalc([32, \"-\", 32])).toEqual(0);\n+    expect(lastPrioritiesCalc([32, \"-\", 32])).toEqual(0);\n   });\n \n   it(\"[32, - 32, +, 10]\", () => {\n-    expect(fourthPrioritiesCalc([32, \"-\", 32, \"+\", 10])).toEqual(10);\n+    expect(lastPrioritiesCalc([32, \"-\", 32, \"+\", 10])).toEqual(10);\n   });\n });\n"
                },
                {
                    "date": 1643554972952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,24 @@\n import { priorityCalc, lastPrioritiesCalc } from \"./engine\";\n+describe(\"FirstPrioritiesCalc cases\", () => {\n+  it(\"8, ^, 3]\", () => {\n+    expect(priorityCalc([8, \"^\", 3], 1)).toEqual([512]);\n+  });\n+});\n+describe(\"secondPrioritiesCalc cases\", () => {\n+  it(\"[1, * 32]\", () => {\n+    expect(priorityCalc([1, \"*\", 32], 3)).toEqual([32]);\n+  });\n \n+  it(\"[32, /, 32]\", () => {\n+    expect(priorityCalc([32, \"/\", 32], 3)).toEqual([1]);\n+  });\n+\n+  it(\"[32, + 32]\", () => {\n+    expect(priorityCalc([32, \"+\", 32], 3)).toEqual([32, \"+\", 32]);\n+  });\n+});\n+\n describe(\"thirdPrioritiesCalc simple cases\", () => {\n   it(\"[1, * 32]\", () => {\n     expect(priorityCalc([1, \"*\", 32], 3)).toEqual([32]);\n   });\n@@ -13,9 +31,9 @@\n     expect(priorityCalc([32, \"+\", 32], 3)).toEqual([32, \"+\", 32]);\n   });\n });\n \n-describe(\"thirdPrioritiesCalc mixed with second priorities cases\", () => {\n+describe(\"3PrioritiesCalc mixed with 4 priorities cases\", () => {\n   it(\"[32, /, 32, +, 10, *, 10]\", () => {\n     expect(priorityCalc([32, \"/\", 32, \"+\", 10, \"*\", 10], 3)).toEqual([\n       1,\n       \"+\",\n"
                },
                {
                    "date": 1643555014276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n     expect(priorityCalc([8, \"^\", 3], 1)).toEqual([512]);\n   });\n });\n describe(\"secondPrioritiesCalc cases\", () => {\n-  it(\"[1, * 32]\", () => {\n-    expect(priorityCalc([1, \"*\", 32], 3)).toEqual([32]);\n+  it(\"[!, 5]\", () => {\n+    expect(priorityCalc([\"!\", 5], 2)).toEqual([120]);\n   });\n \n   it(\"[32, /, 32]\", () => {\n     expect(priorityCalc([32, \"/\", 32], 3)).toEqual([1]);\n"
                },
                {
                    "date": 1643555039820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,8 @@\n describe(\"secondPrioritiesCalc cases\", () => {\n   it(\"[!, 5]\", () => {\n     expect(priorityCalc([\"!\", 5], 2)).toEqual([120]);\n   });\n-\n-  it(\"[32, /, 32]\", () => {\n-    expect(priorityCalc([32, \"/\", 32], 3)).toEqual([1]);\n-  });\n-\n-  it(\"[32, + 32]\", () => {\n-    expect(priorityCalc([32, \"+\", 32], 3)).toEqual([32, \"+\", 32]);\n-  });\n });\n \n describe(\"thirdPrioritiesCalc simple cases\", () => {\n   it(\"[1, * 32]\", () => {\n"
                }
            ],
            "date": 1643547006321,
            "name": "Commit-0",
            "content": "import { firstPrioritiesCalc, secondPrioritiesCalc, thirdPrioritiesCalc, fourthPrioritiesCalc } from \"./engine\";\n\ndescribe(\"firstPrioritiesCalc simple cases\", () => {\n  it(\"[1, * 32]\", () => {\n    expect(firstPrioritiesCalc([1, \"*\", 32])).toEqual([32]);\n  });\n\n  it(\"[32, /, 32]\", () => {\n    expect(firstPrioritiesCalc([32, \"/\", 32])).toEqual([1]);\n  });\n\n  it(\"[32, + 32]\", () => {\n    expect(firstPrioritiesCalc([32, \"+\", 32])).toEqual([32, \"+\", 32]);\n  });\n});\n\ndescribe(\"firstPrioritiesCalc mixed with second priorities cases\", () => {\n  it(\"[32, /, 32, +, 10, *, 10]\", () => {\n    expect(firstPrioritiesCalc([32, \"/\", 32, \"+\", 10, \"*\", 10])).toEqual([\n      1,\n      \"+\",\n      100,\n    ]);\n  });\n});\n\ndescribe(\"secondPrioritiesCalc invalid cases\", () => {\n  it(\"[32, / 32]\", () => {\n    expect(() => secondPrioritiesCalc([32, \"/\", 32])).toThrow(\n      TypeError(\"Unexpected stack!\")\n    );\n  });\n});\n\ndescribe(\"secondPrioritiesCalc simple cases\", () => {\n  it(\"[32, + 32]\", () => {\n    expect(secondPrioritiesCalc([32, \"+\", 32])).toEqual(64);\n  });\n\n  it(\"[32, - 32]\", () => {\n    expect(secondPrioritiesCalc([32, \"-\", 32])).toEqual(0);\n  });\n\n  it(\"[32, - 32, +, 10]\", () => {\n    expect(secondPrioritiesCalc([32, \"-\", 32, \"+\", 10])).toEqual(10);\n  });\n});\n"
        }
    ]
}